name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  ubuntu:
    name: Test (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libssl-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Run tests
        run: cargo test --verbose
        
  macos:
    name: Test (macOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          brew install gtk+3
          brew install openssl@3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Run tests
        run: cargo test --verbose
        
  fedora:
    name: Test (Fedora)
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          dnf update -y
          dnf install -y \
            gcc \
            gtk3-devel \
            openssl-devel \
            libxcb-devel \
            libxkbcommon-devel \
            curl \
            pkg-config
            
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Run tests
        run: cargo test --verbose
        
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy -- -D warnings

  bench:
    name: Benchmarks
    needs: [ubuntu, macos, fedora]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            libssl-dev \
            gnuplot
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Create benchmark directories
        run: |
          mkdir -p benchmarks/baselines/$(date +%Y%m%d)
          mkdir -p benchmarks/baseline

      - name: Run benchmarks
        continue-on-error: true
        run: cargo bench
      
      - name: Save benchmark results
        if: github.ref == 'refs/heads/main'
        continue-on-error: true
        run: |
          cp -r target/criterion/* benchmarks/baselines/$(date +%Y%m%d)/
          cp -r target/criterion/* benchmarks/baseline/
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add benchmarks/
          git commit -m "Update benchmark baseline [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main || echo "No changes to push"
      
      - name: Upload benchmark results
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/criterion
          retention-days: 30

  docs:
    name: Documentation
    needs: [ubuntu, macos, fedora, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build documentation
        run: |
          cargo doc --no-deps --all-features
          echo '<meta http-equiv="refresh" content="0; url=gitstats/index.html">' > target/doc/index.html
          cp -r assets target/doc/ || true
        
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true
          commit_message: 'docs: update documentation'
          enable_jekyll: false